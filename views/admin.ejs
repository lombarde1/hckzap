<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel Admin HocketZap</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/daisyui@3.5.0/dist/full.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&display=swap" rel="stylesheet">
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<style>
    .chart-container {
        position: relative;
        height: 40vh;
        width: 80vw;
        max-width: 800px;
        margin: 0 auto;
    }
</style>
<body class="bg-gradient-to-br from-purple-100 to-indigo-200 min-h-screen">
    <div class="container mx-auto p-6">
        <h1 class="text-4xl font-bold mb-8 text-center text-purple-800">
            <i class="fas fa-user-shield mr-4"></i>Painel Admin HocketZap
        </h1>
        
        <!-- Dashboard Overview -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow-xl p-6">
                <h3 class="text-xl font-bold mb-4">Total de Usuários</h3>
                <p class="text-3xl font-bold text-purple-600" id="totalUsers">Carregando...</p>
            </div>
            <div class="bg-white rounded-lg shadow-xl p-6">
                <h3 class="text-xl font-bold mb-4">Usuários Premium</h3>
                <p class="text-3xl font-bold text-green-600" id="premiumUsers">Carregando...</p>
            </div>
            <div class="bg-white rounded-lg shadow-xl p-6">
                <h3 class="text-xl font-bold mb-4">Receita Mensal</h3>
                <p class="text-3xl font-bold text-blue-600" id="monthlyRevenue">Carregando...</p>
            </div>
        </div>

        <!-- Gráfico de Usuários por Plano -->
    <div class="bg-white rounded-lg shadow-xl p-6 mb-8">
        <h3 class="text-xl font-bold mb-4">Distribuição de Usuários por Plano</h3>
        <div class="chart-container">
            <canvas id="usersPlanChart"></canvas>
        </div>
    </div>

    <!-- Adicione esta seção após a lista de usuários no seu arquivo admin.ejs -->
<div class="bg-white rounded-lg shadow-xl p-6 mt-8">
    <h2 class="text-2xl font-bold mb-6 text-purple-700"><i class="fas fa-clock mr-2"></i>Planos Próximos do Vencimento</h2>
    <table class="w-full table-auto">
        <thead>
            <tr class="bg-purple-100">
                <th class="px-4 py-2 text-left">Nome</th>
                <th class="px-4 py-2 text-left">Plano</th>
                <th class="px-4 py-2 text-left">Data de Vencimento</th>
                <th class="px-4 py-2 text-left">Dias Restantes</th>
                <th class="px-4 py-2 text-left">Ações</th>
            </tr>
        </thead>
        <tbody id="expiringPlansTableBody">
            <!-- Os usuários com planos próximos do vencimento serão carregados aqui dinamicamente -->
        </tbody>
    </table>
</div>
<br>
        <!-- Filtros e Pesquisa -->
        <div class="mb-6 flex flex-wrap justify-between items-center">
            <div class="flex space-x-2">
                <input type="text" id="searchInput" placeholder="Buscar usuários..." class="input input-bordered">
                <select id="planFilter" class="select select-bordered">
                    <option value="">Todos os Planos</option>
                    <option value="gratuito">Gratuito</option>
                    <option value="basico_monthly">Básico Mensal</option>
                    <option value="basico_quarterly">Básico Trimestral</option>
                    <option value="basico_semiannual">Básico Semestral</option>
                    <option value="plus_monthly">Plus Mensal</option>
                    <option value="plus_quarterly">Plus Trimestral</option>
                    <option value="plus_semiannual">Plus Semestral</option>
                    <option value="premium_monthly">Premium Mensal</option>
                    <option value="premium_quarterly">Premium Trimestral</option>
                    <option value="premium_semiannual">Premium Semestral</option>
                </select>
            </div>
            <button onclick="exportUsers()" class="btn btn-primary">
                <i class="fas fa-file-export mr-2"></i>Exportar Usuários
            </button>
        </div>

        <!-- Lista de usuários -->
        <div class="bg-white rounded-lg shadow-xl p-4 sm:p-6 overflow-x-auto">
            <h2 class="text-2xl font-bold mb-6 text-purple-700"><i class="fas fa-users mr-2"></i>Lista de Usuários</h2>
            <table class="w-full table-auto">
                <thead>
                    <tr class="bg-purple-100">
                        <th class="px-2 py-2 text-left">Nome</th>
                        <th class="px-2 py-2 text-left">Email</th>
                        <th class="px-2 py-2 text-left">Telefone</th>
                        <th class="px-2 py-2 text-left">Plano</th>
                        <th class="px-2 py-2 text-left">Ações</th>
                    </tr>
                </thead>
                <tbody id="userTableBody">
                    <!-- Os usuários serão carregados aqui dinamicamente -->
                </tbody>
            </table>
        </div>
    </div>

  <!-- Modal de Edição -->
  <div id="editModal" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
        <h3 class="font-bold text-lg mb-4">Editar Usuário</h3>
        <form id="editForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input type="hidden" id="editUserId" name="userId">
            
            <div class="form-control">
                <label class="label" for="editName">
                    <span class="label-text">Nome</span>
                </label>
                <input type="text" id="editName" name="name" class="input input-bordered w-full">
            </div>

            <div class="form-control">
                <label class="label" for="editEmail">
                    <span class="label-text">Email</span>
                </label>
                <input type="email" id="editEmail" name="email" class="input input-bordered w-full">
            </div>

            <div class="form-control">
                <label class="label" for="editPhone">
                    <span class="label-text">Telefone</span>
                </label>
                <input type="tel" id="editPhone" name="phone" class="input input-bordered w-full">
            </div>

            <div class="form-control">
                <label class="label" for="editUsername">
                    <span class="label-text">Username</span>
                </label>
                <input type="text" id="editUsername" name="username" class="input input-bordered w-full">
            </div>

            <div class="form-control">
                <label class="label" for="editPassword">
                    <span class="label-text">Senha</span>
                </label>
                <input type="password" id="editPassword" name="password" class="input input-bordered w-full">
            </div>

            <div class="form-control">
                <label class="label" for="editPlan">
                    <span class="label-text">Plano</span>
                </label>
                <select id="editPlan" name="plan" class="select select-bordered w-full">
                    <option value="gratuito">Gratuito</option>
                    <option value="basico_monthly">Básico Mensal</option>
                    <option value="basico_quarterly">Básico Trimestral</option>
                    <option value="basico_semiannual">Básico Semestral</option>
                    <option value="plus_monthly">Plus Mensal</option>
                    <option value="plus_quarterly">Plus Trimestral</option>
                    <option value="plus_semiannual">Plus Semestral</option>
                    <option value="premium_monthly">Premium Mensal</option>
                    <option value="premium_quarterly">Premium Trimestral</option>
                    <option value="premium_semiannual">Premium Semestral</option>
                </select>
            </div>

            <div class="form-control">
                <label class="label" for="editValidUntil">
                    <span class="label-text">Validade do Plano</span>
                </label>
                <input type="date" id="editValidUntil" name="validUntil" class="input input-bordered w-full">
            </div>

            <!-- Adicione mais campos conforme necessário -->

            <div class="col-span-2 modal-action">
                <button type="submit" class="btn btn-primary">Salvar</button>
                <button type="button" onclick="closeEditModal()" class="btn">Cancelar</button>
            </div>
        </form>
    </div>
</div>

    <script>
        // Funções para carregar e exibir dados
        function loadDashboardData() {
        fetch('/admin/dashboard-data')
            .then(response => response.json())
            .then(data => {
                document.getElementById('totalUsers').textContent = data.totalUsers;
                
                // Atualizar Usuários Premium
                const premiumUsers = data.usersByPlan.premium || 0;
                document.getElementById('premiumUsers').textContent = premiumUsers;
                
                // Atualizar Receita Mensal
                document.getElementById('monthlyRevenue').textContent = `R$ ${data.monthlyRevenue.toFixed(2)}`;
                
                // Atualizar gráfico
                createUsersPlanChart(data.usersByPlan);
                
                // Adicionar logs para depuração
                console.log('Dashboard data:', data);
            })
            .catch(error => {
                console.error('Erro ao carregar dados do dashboard:', error);
                // Exibir mensagem de erro para o usuário
                Swal.fire('Erro', 'Não foi possível carregar os dados do dashboard', 'error');
            });
    }

    function createUsersPlanChart(data) {
    const planTypes = {
        'Gratuito': data.gratuito || 0,
        'Básico': (data.basico_monthly || 0) + (data.basico_quarterly || 0) + (data.basico_semiannual || 0),
        'Plus': (data.plus_monthly || 0) + (data.plus_quarterly || 0) + (data.plus_semiannual || 0),
        'Premium': (data.premium_monthly || 0) + (data.premium_quarterly || 0) + (data.premium_semiannual || 0)
    };

    const ctx = document.getElementById('usersPlanChart').getContext('2d');
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: Object.keys(planTypes),
            datasets: [{
                data: Object.values(planTypes),
                backgroundColor: [
                    '#4C51BF', '#48BB78', '#4299E1', '#ED8936'
                ]
            }]
        },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    legend: {
                        position: 'bottom',
                    },
                    title: {
                        display: false,
                    },
                    tooltips: {
                        callbacks: {
                            label: function(tooltipItem, data) {
                                const dataset = data.datasets[tooltipItem.datasetIndex];
                                const total = dataset.data.reduce((acc, current) => acc + current, 0);
                                const currentValue = dataset.data[tooltipItem.index];
                                const percentage = ((currentValue / total) * 100).toFixed(2);
                                return `${data.labels[tooltipItem.index]}: ${currentValue} (${percentage}%)`;
                            }
                        }
                    }
                }
            });
        }


        function loadUsers() {
    fetch('/admin/users')
        .then(response => response.json())
        .then(users => {
            const tbody = document.getElementById('userTableBody');
            tbody.innerHTML = '';
            users.forEach(user => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-4 py-2">${user.name}</td>
                    <td class="px-4 py-2">${user.email}</td>
                    <td class="px-4 py-2">${user.phone}</td>
                    <td class="px-4 py-2">${formatPlanName(user.plan)}</td>
                    <td class="px-4 py-2">${user.manualPlanActive ? 'Ativo' : 'Inativo'}</td>
                    <td class="px-4 py-2">${formatDate(user.validUntil)}</td>
                    <td class="px-4 py-2">
                        <button onclick="openEditModal('${user._id}')" class="btn btn-sm btn-primary mr-2">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button onclick="deleteUser('${user._id}')" class="btn btn-sm btn-error">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        })
        .catch(error => console.error('Erro ao carregar usuários:', error));
}

function formatPlanName(plan) {
    const planParts = plan.split('_');
    if (planParts.length === 1) return plan.charAt(0).toUpperCase() + plan.slice(1);
    const [type, duration] = planParts;
    return `${type.charAt(0).toUpperCase() + type.slice(1)} ${duration.charAt(0).toUpperCase() + duration.slice(1)}`;
}
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString();
        }

        // Funções para manipulação de usuários
        
        function openEditModal(userId) {
    fetch(`/admin/user/${userId}`)
        .then(response => response.json())
        .then(user => {
            document.getElementById('editUserId').value = user._id;
            document.getElementById('editName').value = user.name;
            document.getElementById('editEmail').value = user.email;
            document.getElementById('editPhone').value = user.phone;
            document.getElementById('editUsername').value = user.username;
            document.getElementById('editPassword').value = user.password;
            document.getElementById('editPlan').value = user.plan;
            document.getElementById('editValidUntil').value = user.validUntil ? new Date(user.validUntil).toISOString().split('T')[0] : '';
            document.getElementById('editModal').classList.add('modal-open');
        })
        .catch(error => {
            console.error('Erro ao carregar dados do usuário:', error);
            Swal.fire('Erro', 'Não foi possível carregar os dados do usuário', 'error');
        });
}

function closeEditModal() {
    document.getElementById('editModal').classList.remove('modal-open');
}

function deleteUser(userId) {
    Swal.fire({
        title: 'Tem certeza?',
        text: "Esta ação não pode ser desfeita!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sim, deletar',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/admin/user/${userId}`, { method: 'DELETE' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire('Deletado!', 'O usuário foi deletado com sucesso.', 'success');
                        loadUsers(); // Recarrega a lista de usuários
                        loadDashboardData(); // Atualiza os dados do dashboard
                    } else {
                        Swal.fire('Erro', 'Não foi possível deletar o usuário', 'error');
                    }
                })
                .catch(error => {
                    console.error('Erro ao deletar usuário:', error);
                    Swal.fire('Erro', 'Ocorreu um erro ao tentar deletar o usuário', 'error');
                });
        }
    });
}

// Função para salvar as edições do usuário
document.getElementById('editForm').addEventListener('submit', function(e) {
    e.preventDefault();
    const userId = document.getElementById('editUserId').value;
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);

    // Remover a senha se estiver vazia
    if (!data.password) {
        delete data.password;
    }

    fetch(`/admin/user/${userId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                title: 'Atualizado!',
                text: 'As informações do usuário foram atualizadas com sucesso.',
                icon: 'success',
                confirmButtonText: 'OK'
            }).then((result) => {
                if (result.isConfirmed) {
                    closeEditModal();
                    loadUsers();
                    loadDashboardData();
                }
            });
        } else {
            throw new Error(data.message || 'Erro ao atualizar usuário');
        }
    })
    .catch(error => {
        console.error('Erro ao atualizar usuário:', error);
        Swal.fire('Erro', error.message || 'Ocorreu um erro ao tentar atualizar as informações do usuário', 'error');
    });
});

// Função para filtrar usuários
function filterUsers() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const planFilter = document.getElementById('planFilter').value.toLowerCase();
    const rows = document.querySelectorAll('#userTableBody tr');

    rows.forEach(row => {
        const name = row.cells[0].textContent.toLowerCase();
        const email = row.cells[1].textContent.toLowerCase();
        const plan = row.cells[3].textContent.toLowerCase();

        const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
        const matchesPlan = planFilter === '' || plan.includes(planFilter);

        if (matchesSearch && matchesPlan) {
            row.style.display = '';
        } else {
            row.style.display = 'none';
        }
    });
}


document.getElementById('searchInput').addEventListener('input', filterUsers);
document.getElementById('planFilter').addEventListener('change', filterUsers);

// Função para exportar usuários
function exportUsers() {
    fetch('/admin/export-users')
        .then(response => response.blob())
        .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = 'usuarios_budzap.csv';
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
        })
        .catch(error => {
            console.error('Erro ao exportar usuários:', error);
            Swal.fire('Erro', 'Não foi possível exportar os usuários', 'error');
        });
}

function loadExpiringPlans() {
    fetch('/admin/expiring-plans')
        .then(response => response.json())
        .then(plans => {
            const tbody = document.getElementById('expiringPlansTableBody');
            tbody.innerHTML = '';
            plans.forEach(plan => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-4 py-2">${plan.name}</td>
                    <td class="px-4 py-2">${plan.plan}</td>
                    <td class="px-4 py-2">${new Date(plan.validUntil).toLocaleDateString()}</td>
                    <td class="px-4 py-2">${plan.daysRemaining}</td>
                    <td class="px-4 py-2">
                        <button onclick="sendReminder('${plan.id}')" class="btn btn-sm btn-primary">
                            Enviar Lembrete
                        </button>
                    </td>
                `;
                tbody.appendChild(tr);
            });
        })
        .catch(error => console.error('Erro ao carregar planos próximos do vencimento:', error));
}

function sendReminder(userId) {
    fetch('/admin/send-reminder', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire('Sucesso', 'Lembrete enviado com sucesso', 'success');
        } else {
            Swal.fire('Erro', data.error || 'Erro ao enviar lembrete', 'error');
        }
    })
    .catch(error => {
        console.error('Erro ao enviar lembrete:', error);
        Swal.fire('Erro', 'Ocorreu um erro ao enviar o lembrete', 'error');
    });
}


// Carregar dados iniciais
loadDashboardData();
loadUsers();
loadExpiringPlans();
    </script>
</body>
</html>