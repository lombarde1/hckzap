<!DOCTYPE html>
<html lang="pt-BR" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gerenciar Funis - HocketZap</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@3.5.0/dist/full.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    
    <style>
        .modal {
            z-index: 1000;
        }
        .modal-box {
            max-height: 80vh;
            overflow-y: auto;
        }
        .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
    <nav class="bg-purple-600 text-white p-4 shadow-md">
        <div class="container mx-auto flex flex-col sm:flex-row justify-between items-center">
            <h1 class="text-2xl font-bold mb-2 sm:mb-0">Funis</h1>
            <div class="flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4">
                <span id="funnelCount" class="text-sm"></span>
                <button id="createFunnelBtn" class="btn btn-outline btn-white">
                    <i class="fas fa-plus mr-2"></i>Criar Novo Funil
                </button>
                <!-- Adicione este botÃ£o logo apÃ³s o botÃ£o "Criar funil com IA" na barra de navegaÃ§Ã£o -->
<button onclick="deleteAllFunnels()" class="btn btn-outline btn-error">
    <i class="fas fa-trash-alt mr-2"></i>Apagar Todos os Funis
</button>
                <button onclick="showImportModal()" class="btn btn-outline btn-white">
                    <i class="fas fa-file-import mr-2"></i>Importar
                </button>
                <button onclick="showAIFunnelModal()" class="btn btn-outline btn-white">
                    <i class="fas fa-robot mr-2"></i>Criar funil com IA
                </button>
            </div>
        </div>
    </nav>
    <!-- Modal para criar funil com IA -->
<div id="aiFunnelModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Criar Funil com IA</h3>
        <form id="aiFunnelForm" class="py-4">
            <textarea id="aiFunnelPrompt" placeholder="Descreva o funil que vocÃª deseja criar..." class="textarea textarea-bordered w-full mb-4" rows="4" required></textarea>
            <input type="number" id="aiFunnelSteps" placeholder="NÃºmero de passos" class="input input-bordered w-full mb-4" min="1" required>
        </form>
        <div class="modal-action">
            <button onclick="createAIFunnel()" class="btn btn-primary">Criar</button>
            <button onclick="closeAIFunnelModal()" class="btn">Cancelar</button>
        </div>
    </div>
</div>
    <main class="container mx-auto p-4 flex-grow">
        <div class="mb-6 flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
            <h2 class="text-2xl font-bold text-purple-800">Seus Funis</h2>
            <div class="flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4 w-full sm:w-auto">
                <input type="text" id="searchInput" placeholder="Buscar funis..." class="input input-bordered w-full sm:w-64">
                <select id="sortSelect" class="select select-bordered w-full sm:w-auto">
                    <option value="name">Ordenar por Nome</option>
                    <option value="date">Ordenar por Data</option>
                    <option value="steps">Ordenar por NÂº de Passos</option>
                </select>
            </div>
        </div>
        <div id="funnelList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"></div>
    </main>

    <!-- Modal para criar/editar funil -->
    <div id="funnelModal" class="modal">
        <div class="modal-box">
            <h3 class="font-bold text-lg" id="modalTitle">Criar Novo Funil</h3>
            <form id="funnelForm" class="py-4">
                <input type="text" id="funnelName" placeholder="Nome do Funil" class="input input-bordered w-full mb-4" required>
                <textarea id="funnelDescription" placeholder="DescriÃ§Ã£o (opcional)" class="textarea textarea-bordered w-full" rows="3"></textarea>
            </form>
            <div class="modal-action">
                <button id="saveFunnelBtn" class="btn btn-primary" type="submit" form="funnelForm">Salvar</button>
                <button onclick="closeModal()" class="btn">Cancelar</button>
            </div>
        </div>
    </div>
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
        <div class="bg-white p-8 rounded-lg shadow-lg text-center">
            <div class="loader mb-4"></div>
            <p class="text-xl font-semibold">Criando seu funil mÃ¡gico... ðŸŽ©âœ¨</p>
            <p class="text-sm text-gray-600 mt-2">Isso pode levar alguns segundos.</p>
        </div>
    </div>
    
   
<!-- Modal para importaÃ§Ã£o de funis -->
<div id="importModal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg">Importar Funil</h3>
        <form id="importForm" class="py-4">
            <input type="file" id="importFile" accept=".json" class="file-input file-input-bordered w-full" />
        </form>
        <div class="modal-action">
            <button onclick="importFunnel()" class="btn btn-primary">Importar</button>
            <button onclick="closeImportModal()" class="btn">Cancelar</button>
        </div>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
    <script>
  let funnels = [];
const currentPlan = '<%= user.plan %>';
const PLAN_LIMITS = {
    gratuito: 0,

    basico_monthly: 15,
    basico_quarterly: 15,
    basico_semiannual: 15,

    plus_monthly: 30,
    plus_quarterly: 30,
    plus_semiannual: 39,

    plus_monthly: 30,
    plus_quarterly: 30,
    plus_semiannual: 39,

    premium_monthly: Infinity,
    premium_quarterly: Infinity,
    premium_semiannual: Infinity,


};
const funnelLimit = PLAN_LIMITS[currentPlan];


function showAIFunnelModal() {
    document.getElementById('aiFunnelModal').classList.add('modal-open');
}

function closeAIFunnelModal() {
    document.getElementById('aiFunnelModal').classList.remove('modal-open');
}

async function createAIFunnel() {
    const prompt = document.getElementById('aiFunnelPrompt').value;
    const steps = document.getElementById('aiFunnelSteps').value;

    if (!prompt || !steps) {
        showNotification('Erro', 'Por favor, preencha todos os campos.', 'error');
        return;
    }

    // Mostrar a animaÃ§Ã£o de carregamento
    document.getElementById('loadingOverlay').classList.remove('hidden');

    try {
        const response = await fetch('/funnels/api/create-ai-funnel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ prompt, steps }),
        });

        if (!response.ok) {
            throw new Error('Falha ao criar funil com IA');
        }

        const result = await response.json();

        if (result.funnel) {
            showNotification('Sucesso', 'Funil criado com sucesso!', 'success');
            closeAIFunnelModal();
            await loadFunnels();
        } else {
            throw new Error(result.error || 'Erro desconhecido ao criar funil com IA');
        }
    } catch (error) {
        console.error('Erro ao criar funil com IA:', error);
        if (error.message.includes('SyntaxError: Unterminated string in JSON')) {
            showNotification('Erro', 'Ocorreu um erro ao processar a resposta da IA. Por favor, tente novamente com um prompt diferente.', 'error');
        } else {
            showNotification('Erro', 'Erro ao criar funil com IA. Por favor, tente novamente.', 'error');
        }
    } finally {
        // Esconder a animaÃ§Ã£o de carregamento
        document.getElementById('loadingOverlay').classList.add('hidden');
    }
}

function showImportModal() {
            document.getElementById('importModal').classList.add('modal-open');
        }

        function closeImportModal() {
            document.getElementById('importModal').classList.remove('modal-open');
        }

        async function importFunnel() {
    const fileInput = document.getElementById('importFile');
    const file = fileInput.files[0];
    
    if (!file) {
        showNotification('Erro', 'Por favor, selecione um arquivo para importar.', 'error');
        return;
    }

    try {
        const fileContent = await file.text();
        const funnelData = JSON.parse(fileContent);
        
        const response = await fetch('/funnels/api/import', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ funnelData }),
        });
        
        const result = await response.json();
        
        if (result.funnelId) {
            showNotification('Sucesso', 'Funil importado com sucesso!', 'success');
            closeImportModal();
            await loadFunnels();
        } else {
            throw new Error(result.error || 'Erro desconhecido ao importar funil');
        }
    } catch (error) {
        console.error('Erro ao importar funil:', error);
        showNotification('Erro', 'Erro ao importar funil. Verifique se o arquivo Ã© vÃ¡lido e tente novamente.', 'error');
    }

    // Limpar o input de arquivo apÃ³s a importaÃ§Ã£o
    fileInput.value = '';
}

document.addEventListener('DOMContentLoaded', () => {
    loadFunnels();
    
    document.getElementById('createFunnelBtn').addEventListener('click', () => {
        if (!currentPlan.includes('premium') && funnels.length >= funnelLimit) {
            showNotification('Limite atingido', `VocÃª atingiu o limite de funis para o plano ${currentPlan}. FaÃ§a um upgrade para criar mais funis.`, 'warning');
        } else {
            openModal('create');
        }
    });
    
    document.getElementById('searchInput').addEventListener('input', filterFunnels);
    document.getElementById('sortSelect').addEventListener('change', sortFunnels);
    document.getElementById('funnelForm').addEventListener('submit', handleFormSubmit);
});

async function loadFunnels() {
    try {
        const response = await fetch('/funnels/api/list');
        if (!response.ok) {
            throw new Error('Falha ao carregar funis');
        }
        funnels = await response.json();
        updateFunnelCount(funnels.length, funnelLimit);
        renderFunnels();
    } catch (error) {
        console.error('Erro ao carregar funis:', error);
        showNotification('Erro', 'Erro ao carregar funis. Por favor, tente novamente.', 'error');
    }
}

function updateFunnelCount(count, limit) {
    const funnelCountElement = document.getElementById('funnelCount');
    funnelCountElement.textContent = `Funis: ${count}/${limit === Infinity ? 'âˆž' : limit}`;
    funnelCountElement.className = count >= limit ? 'text-red-300' : 'text-white';
}

// Atualizar a funÃ§Ã£o renderFunnels com tratamento de data e ediÃ§Ã£o de nome

function renderFunnels() {
    const funnelList = document.getElementById('funnelList');
    funnelList.innerHTML = '';
    const funnelLimit = PLAN_LIMITS[currentPlan] || 0;
    const isUnlimited = funnelLimit === Infinity;

    funnels.forEach((funnel, index) => {
        const isBlocked = !isUnlimited && index >= funnelLimit;
        const funnelElement = document.createElement('div');
        funnelElement.className = `card relative ${isBlocked ? 'bg-gray-100' : 'bg-white'} shadow-lg transition-shadow duration-300`;

        // Formatar a data corretamente
        const createdDate = funnel.createdAt ? new Date(funnel.createdAt) : new Date();
        const formattedDate = isValidDate(createdDate) ? createdDate.toLocaleDateString() : 'Data nÃ£o disponÃ­vel';

        // Adiciona overlay de bloqueio se necessÃ¡rio
        if (isBlocked) {
            funnelElement.innerHTML = `
                <div class="absolute inset-0 bg-gray-900/50 backdrop-blur-[2px] z-10 rounded-lg flex flex-col items-center justify-center text-white">
                    <i class="fas fa-lock text-3xl mb-2"></i>
                    <p class="text-center px-4">FaÃ§a upgrade do plano para acessar este funil</p>
                    <button onclick="window.location.href='/change-plan'" class="btn btn-sm btn-primary mt-4">
                        Fazer Upgrade
                    </button>
                </div>
            `;
        }

        // ConteÃºdo principal do card com nome editÃ¡vel
        funnelElement.innerHTML += `
            <div class="card-body ${isBlocked ? 'opacity-50' : ''}">
                <div class="flex justify-between items-start">
                    <div class="w-full group">
                        <div class="flex items-center justify-between">
                            <h3 class="card-title text-lg ${isBlocked ? 'text-gray-500' : 'text-purple-700'} group-hover:hidden">
                                ${funnel.name}
                            </h3>
                            <button onclick="enableNameEdit('${funnel.id}')" 
                                    class="btn btn-ghost btn-xs opacity-0 group-hover:opacity-100 transition-opacity">
                                <i class="fas fa-pencil-alt"></i>
                            </button>
                        </div>
                        <input type="text" 
                               id="nameEdit_${funnel.id}" 
                               value="${funnel.name}" 
                               class="hidden input input-bordered input-sm w-full max-w-xs mt-1"
                               onblur="saveNewName('${funnel.id}')"
                               onkeypress="handleNameKeyPress(event, '${funnel.id}')">
                    </div>
                    ${isBlocked ? '<span class="badge badge-warning">Bloqueado</span>' : ''}
                </div>
                <p class="text-sm ${isBlocked ? 'text-gray-500' : 'text-gray-600'} mt-2">
                    ${funnel.description || 'Sem descriÃ§Ã£o'}
                </p>
                
                <div class="flex justify-between items-center mt-4">
                    <div class="flex items-center space-x-2">
                        <span class="text-sm ${isBlocked ? 'text-gray-500' : 'text-purple-600'}">
                            <i class="fas fa-project-diagram mr-1"></i> 
                            ${funnel.nodes ? funnel.nodes.length : 0} passos
                        </span>
                    </div>
                    <span class="text-xs ${isBlocked ? 'text-gray-500' : 'text-gray-400'}">
                        <i class="far fa-calendar-alt mr-1"></i>
                        ${formattedDate}
                    </span>
                </div>

                <div class="card-actions justify-end mt-4 ${isBlocked ? 'pointer-events-none' : ''}">
                    <button onclick="exportFunnel('${funnel.id}')" 
                            class="btn btn-sm btn-outline btn-primary" 
                            ${isBlocked ? 'disabled' : ''}>
                        <i class="fas fa-file-export mr-1"></i>Exportar
                    </button>
                    <button onclick="editFunnel('${funnel.id}')" 
                            class="btn btn-sm btn-primary"
                            ${isBlocked ? 'disabled' : ''}>
                        <i class="fas fa-edit mr-1"></i>Editar
                    </button>
                    <button onclick="deleteFunnel('${funnel.id}')" 
                            class="btn btn-sm btn-error"
                            ${isBlocked ? 'disabled' : ''}>
                        <i class="fas fa-trash mr-1"></i>Deletar
                    </button>
                </div>
            </div>
        `;

        funnelList.appendChild(funnelElement);
    });

    updateFunnelCount(funnels.length, funnelLimit);
}

// FunÃ§Ãµes auxiliares para validaÃ§Ã£o e manipulaÃ§Ã£o de datas
function isValidDate(date) {
    return date instanceof Date && !isNaN(date);
}

// FunÃ§Ãµes para ediÃ§Ã£o do nome do funil
function enableNameEdit(funnelId) {
    const titleElement = document.querySelector(`#nameEdit_${funnelId}`);
    const nameDisplay = titleElement.previousElementSibling;
    
    titleElement.classList.remove('hidden');
    nameDisplay.classList.add('hidden');
    titleElement.focus();
}

async function saveNewName(funnelId, newName) {
    try {
        const inputElement = document.querySelector(`#nameEdit_${funnelId}`);
        const nameToSave = newName || inputElement.value;

        if (!nameToSave.trim()) {
            showNotification('Erro', 'O nome do funil nÃ£o pode estar vazio', 'error');
            return;
        }

        const response = await fetch(`/funnels/api/update-name/${funnelId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ name: nameToSave })
        });

        if (response.ok) {
            const data = await response.json();
            
            // Atualizar o nome no array local
            const funnel = funnels.find(f => f.id === funnelId);
            if (funnel) {
                funnel.name = nameToSave;
            }
            
            // Atualizar a visualizaÃ§Ã£o
            await loadFunnels();
            
            showNotification('Sucesso', 'Nome do funil atualizado com sucesso!', 'success');
        } else {
            const error = await response.json();
            throw new Error(error.error || 'Falha ao atualizar o nome do funil');
        }
    } catch (error) {
        console.error('Erro ao salvar novo nome:', error);
        showNotification('Erro', error.message || 'Erro ao atualizar o nome do funil', 'error');
    }
}
function handleNameKeyPress(event, funnelId) {
    if (event.key === 'Enter') {
        event.preventDefault();
        saveNewName(funnelId);
    }
}
        async function exportFunnel(funnelId) {
        try {
            const response = await fetch(`/funnels/api/export/${funnelId}`);
            if (!response.ok) {
                throw new Error('Falha ao exportar funil');
            }
            const funnelData = await response.json();
            const dataStr = JSON.stringify(funnelData, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const exportFileDefaultName = `funnel_${funnelId}.json`;

            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            showNotification('Sucesso', 'Funil exportado com sucesso!', 'success');
        } catch (error) {
            console.error('Erro ao exportar funil:', error);
            showNotification('Erro', 'Erro ao exportar funil. Por favor, tente novamente.', 'error');
        }
    }


function showUpgradeNotification() {
    Swal.fire({
        title: 'Upgrade NecessÃ¡rio',
        text: 'VocÃª atingiu o limite de funis para o seu plano atual. FaÃ§a um upgrade para editar ou deletar este funil.',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Fazer Upgrade',
        cancelButtonText: 'Cancelar'
    }).then((result) => {
        if (result.isConfirmed) {
            window.location.href = '/change-plan';
        }
    });
}

// Adicione esta funÃ§Ã£o ao seu script existente
async function deleteAllFunnels() {
    const result = await Swal.fire({
        title: 'Tem certeza?',
        text: "Isso irÃ¡ apagar todos os seus funis. Esta aÃ§Ã£o nÃ£o pode ser revertida!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Sim, apagar tudo!',
        cancelButtonText: 'Cancelar'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/funnels/api/delete-all', { method: 'DELETE' });
            if (response.ok) {
                await loadFunnels();
                showNotification('Sucesso', 'Todos os funis foram apagados com sucesso!', 'success');
            } else {
                throw new Error('Falha ao apagar todos os funis');
            }
        } catch (error) {
            console.error('Erro:', error);
            showNotification('Erro', 'Erro ao apagar todos os funis. Por favor, tente novamente.', 'error');
        }
    }
}

async function handleFormSubmit(e) {
    e.preventDefault();
    const name = document.getElementById('funnelName').value;
    const description = document.getElementById('funnelDescription').value;
    const modal = document.getElementById('funnelModal');

    try {
        // Desabilitar o botÃ£o de submit enquanto processa
        const submitButton = document.querySelector('#saveFunnelBtn');
        if (submitButton) {
            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
        }

        const response = await fetch('/funnels/api/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name, description })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Falha ao criar funil');
        }

        // Fechar o modal de forma segura
        if (modal && modal.classList) {
            modal.classList.remove('modal-open');
        }

        // Atualizar a lista de funis
        await loadFunnels();

        // Mostrar notificaÃ§Ã£o de sucesso
        showNotification('Sucesso', 'Funil criado com sucesso!', 'success');

    } catch (error) {
        console.error('Erro ao criar funil:', error);
        showNotification('Erro', `Erro ao criar funil: ${error.message}`, 'error');
    } finally {
        // Restaurar o estado do botÃ£o
        const submitButton = document.querySelector('#saveFunnelBtn');
        if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = 'Salvar';
        }

        // Limpar o formulÃ¡rio
        const form = document.getElementById('funnelForm');
        if (form) {
            form.reset();
        }

        // Garantir que o modal estÃ¡ fechado
        try {
            if (modal && modal.classList) {
                modal.classList.remove('modal-open');
            }
        } catch (e) {
            console.warn('Erro ao fechar modal:', e);
        }
    }
}

// FunÃ§Ã£o auxiliar para verificar se um elemento existe antes de manipulÃ¡-lo
function safelyManipulateElement(elementId, callback) {
    const element = document.getElementById(elementId);
    if (element) {
        callback(element);
    } else {
        console.warn(`Elemento com ID ${elementId} nÃ£o encontrado`);
    }
}

// FunÃ§Ã£o de abrir modal atualizada
function openModal(mode, funnelId = null) {
    safelyManipulateElement('funnelModal', (modal) => {
        safelyManipulateElement('modalTitle', (title) => {
            title.textContent = mode === 'create' ? 'Criar Novo Funil' : 'Editar Funil';
        });

        safelyManipulateElement('funnelName', (nameInput) => {
            if (mode === 'create') {
                nameInput.value = '';
            } else {
                const funnel = funnels.find(f => f.id === funnelId);
                nameInput.value = funnel ? funnel.name : '';
            }
        });

        safelyManipulateElement('funnelDescription', (descInput) => {
            if (mode === 'create') {
                descInput.value = '';
            } else {
                const funnel = funnels.find(f => f.id === funnelId);
                descInput.value = funnel ? funnel.description || '' : '';
            }
        });

        modal.classList.add('modal-open');
    });
}

// FunÃ§Ã£o de fechar modal atualizada
function closeModal() {
    safelyManipulateElement('funnelModal', (modal) => {
        modal.classList.remove('modal-open');
    });
}

function editFunnel(id) {
    if (id) {
        window.location.href = `/funil/flow/${id}`;
    } else {
        showNotification('Erro', 'ID do funil nÃ£o encontrado. Por favor, tente novamente.', 'error');
    }
}


async function deleteFunnel(id) {
    const result = await Swal.fire({
        title: 'Tem certeza?',
        text: "VocÃª nÃ£o poderÃ¡ reverter esta aÃ§Ã£o!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sim, deletar!',
        cancelButtonText: 'Cancelar'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch(`/funnels/api/delete/${id}`, { method: 'DELETE' });
            if (response.ok) {
                await loadFunnels();
                showNotification('Sucesso', 'Funil deletado com sucesso!', 'success');
            } else {
                throw new Error('Falha ao deletar funil');
            }
        } catch (error) {
            console.error('Erro:', error);
            showNotification('Erro', 'Erro ao deletar funil. Por favor, tente novamente.', 'error');
        }
    }
}

function filterFunnels() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const filteredFunnels = funnels.filter(funnel => 
        funnel.name.toLowerCase().includes(searchTerm) || 
        (funnel.description && funnel.description.toLowerCase().includes(searchTerm))
    );
    renderFilteredFunnels(filteredFunnels);
}

function sortFunnels() {
    const sortBy = document.getElementById('sortSelect').value;
    funnels.sort((a, b) => {
        if (sortBy === 'name') return a.name.localeCompare(b.name);
        if (sortBy === 'date') return new Date(b.createdAt) - new Date(a.createdAt);
        if (sortBy === 'steps') return (b.nodes ? b.nodes.length : 0) - (a.nodes ? a.nodes.length : 0);
    });
    renderFunnels();
}

function renderFilteredFunnels(filteredFunnels) {
    const funnelList = document.getElementById('funnelList');
    funnelList.innerHTML = '';
    filteredFunnels.forEach((funnel, index) => {
        const isBlocked = !currentPlan.includes('premium') && index >= funnelLimit;

        const funnelElement = document.createElement('div');
        funnelElement.className = `card ${isBlocked ? 'bg-gray-200' : 'bg-white'} shadow-lg hover:shadow-xl transition-shadow duration-300`;
        funnelElement.innerHTML = `
            <div class="card-body p-4">
                <h3 class="card-title text-lg ${isBlocked ? 'text-gray-500' : 'text-purple-700'}">${funnel.name}</h3>
                <p class="text-sm ${isBlocked ? 'text-gray-500' : 'text-gray-600'}">${funnel.description || 'Sem descriÃ§Ã£o'}</p>
                <div class="flex justify-between items-center mt-4">
                    <span class="text-sm ${isBlocked ? 'text-gray-500' : 'text-purple-600'}">Passos: ${funnel.nodes ? funnel.nodes.length : 0}</span>
                    <span class="text-xs ${isBlocked ? 'text-gray-500' : 'text-gray-400'}">Criado em: ${new Date(funnel.createdAt).toLocaleDateString()}</span>
                </div>
                <div class="card-actions justify-end mt-4">
                    <button onclick="${isBlocked ? 'showUpgradeNotification()' : `editFunnel('${funnel.id}')`}" 
                            class="btn btn-sm ${isBlocked ? 'btn-disabled' : 'btn-primary'}">
                        <i class="fas fa-edit mr-1"></i>Editar
                    </button>
                    <button onclick="${isBlocked ? 'showUpgradeNotification()' : `deleteFunnel('${funnel.id}')`}" 
                            class="btn btn-sm ${isBlocked ? 'btn-disabled' : 'btn-error'}">
                        <i class="fas fa-trash mr-1"></i>Deletar
                    </button>
                </div>
                ${isBlocked ? '<div class="mt-2 text-xs text-red-500">FaÃ§a upgrade para editar este funil</div>' : ''}
            </div>
        `;
        funnelList.appendChild(funnelElement);
    });
}

function showNotification(title, message, icon) {
    Swal.fire({
        title: title,
        text: message,
        icon: icon,
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
    });
}
    </script>
</body>
</html>