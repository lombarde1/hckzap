<!-- views/notifications.ejs -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Notificações - HocketZap</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Poppins', sans-serif; }
        .notification-card { transition: all 0.3s ease; }
        .notification-card:hover { transform: translateY(-5px); }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-purple-700 mb-8">Suas Notificações</h1>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <% if (notifications.length === 0) { %>
                <div class="col-span-full text-center py-10">
                    <i class="fas fa-bell-slash text-5xl text-gray-400 mb-4"></i>
                    <p class="text-xl text-gray-600">Você não tem notificações no momento.</p>
                </div>
            <% } else { %>
                <% notifications.forEach(notification => { %>
                    <div class="notification-card bg-white rounded-lg shadow-md p-6 <%= notification.read ? 'opacity-60' : '' %>" data-id="<%= notification._id %>">
                        <div class="flex justify-between items-start mb-4">
                            <div class="flex items-center">
                                <i class="fas fa-<%= notification.icon || 'bell' %> text-2xl text-purple-500 mr-3"></i>
                                <h3 class="text-lg font-semibold"><%= notification.title %></h3>
                            </div>
                            <div class="flex space-x-2">
                                <% if (!notification.read) { %>
                                    <button class="mark-read-btn text-blue-500 hover:text-blue-700">
                                        <i class="fas fa-check-circle"></i>
                                    </button>
                                <% } %>
                                <button class="delete-btn text-red-500 hover:text-red-700">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                        <p class="text-gray-600 mb-3"><%= notification.content %></p>
                        <p class="text-sm text-gray-400"><%= new Date(notification.timestamp).toLocaleString() %></p>
                    </div>
                <% }); %>
            <% } %>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const notificationCards = document.querySelectorAll('.notification-card');

        notificationCards.forEach(card => {
            const notificationId = card.dataset.id;
            const markReadBtn = card.querySelector('.mark-read-btn');
            const deleteBtn = card.querySelector('.delete-btn');

            if (markReadBtn) {
                markReadBtn.addEventListener('click', () => markAsRead(notificationId, card));
            }

            deleteBtn.addEventListener('click', () => deleteNotification(notificationId, card));
        });
    });

    function markAsRead(notificationId, card) {
        fetch('/notifications/mark-read', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ notificationId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                card.classList.add('opacity-60');
                card.querySelector('.mark-read-btn').remove();
                Swal.fire({
                    icon: 'success',
                    title: 'Notificação marcada como lida',
                    showConfirmButton: false,
                    timer: 1500
                });
            }
        })
        .catch(error => console.error('Erro:', error));
    }

    function deleteNotification(notificationId, card) {
        Swal.fire({
            title: 'Tem certeza?',
            text: "Você não poderá reverter esta ação!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Sim, deletar!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/notifications/delete', {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notificationId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        card.remove();
                        Swal.fire(
                            'Deletada!',
                            'A notificação foi removida.',
                            'success'
                        );
                    }
                })
                .catch(error => console.error('Erro:', error));
            }
        });
    }
    </script>
</body>
</html>